// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.BetaBot.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3824.BetaBot.Constants;
import org.usfirst.frc3824.BetaBot.Robot;

/**
 *
 */
public class AutonomousAutoDriveOverDefense extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_distance;
    private double m_power;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousAutoDriveOverDefense(double distance, double power) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_distance = distance;
        m_power = power;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

	// Called just before this Command runs the first time
	protected void initialize()
	{
		System.out.println("In ChassisDriveStraightDistance initialize");
		
		// Set the PID up for driving straight
		Robot.chassis.configureGyroPIDs(Constants.DRIVETRAIN_DRIVE_STRAIGHT_P, 
		                                Constants.DRIVETRAIN_DRIVE_STRAIGHT_I, 
		                                Constants.DRIVETRAIN_DRIVE_STRAIGHT_D, 
		                                Constants.DRIVETRAIN_DRIVE_MINIMUM_OUTPUT,
		                                Constants.DRIVETRAIN_DRIVE_MAXIMUM_OUTPUT,
		                                Robot.chassis.getCurrentHeading(), 0.0, m_power);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		// Slow down when reaching the desired position
		if (Math.abs(m_distance - Robot.chassis.getDistance()) < 50.0)
			Robot.chassis.setMagnitude(0.5);
		
		// Update gyro setpoint for auto drive
		Robot.chassis.updateGyroSetpointFromUltrasonic();
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		return Robot.chassis.getDistance() > m_distance;
	}

	// Called once after isFinished returns true
	protected void end()
	{
		System.out.println("In ChassisDriveStraightDistance end");

		// disable the PID and stop the robot
		Robot.chassis.disableAllPIDs();
		Robot.chassis.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		System.out.println("In ChassisDriveStraightDistance interrupted");

		// call the end method
		this.end();
	}
}
