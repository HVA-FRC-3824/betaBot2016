// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.commands;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3824.BetaBot.Constants;
import org.usfirst.frc3824.BetaBot.Robot;
import org.usfirst.frc3824.BetaBot.subsystems.Chassis.AnglePIDOutput;

/**
 *
 */
public class ChassisTurnToImageTarget extends Command
{
	private PIDController turnController;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	public ChassisTurnToImageTarget()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		turnController = new PIDController(Constants.IMAGE_TURN_P, Constants.IMAGE_TURN_I, Constants.IMAGE_TURN_D,
		    								new ImageDataPIDInput(), Robot.chassis.new AnglePIDOutput());
		
		
		LiveWindow.addActuator("Chassis", "Image Turn PID", turnController);
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		turnController.setPID(		    	
				Preferences.getInstance().getDouble("ImageTurn_P", Constants.IMAGE_TURN_P),
		    	Preferences.getInstance().getDouble("ImageTurn_I", Constants.IMAGE_TURN_I),
		    	Preferences.getInstance().getDouble("ImageTurn_D", Constants.IMAGE_TURN_D));

		turnController.setOutputRange(
				-Preferences.getInstance().getDouble("ImageTurn_MaxAbsOutput", 1.0),
				Preferences.getInstance().getDouble("ImageTurn_MaxAbsOutput", 1.0));
		
		turnController.reset();
		turnController.setSetpoint(0.0);

		// enable the PID
		turnController.enable();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		SmartDashboard.putNumber("ImageTurn Current Angle", Robot.chassis.getGyroValue());
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		return false;
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// disable the PID and stop the robot
		turnController.reset();
		turnController.disable();
		Robot.chassis.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		// call the end method
		this.end();
	}

	/**
	 * Class declaration for the PIDSource
	 */
	public class ImageDataPIDInput implements PIDSource
	{
		double[] defaultValue = new double[0];

		public ImageDataPIDInput()
		{
			// TODO Auto-generated constructor stub
		}

		/**
		 * Virtual function to calculate pid value
		 */
		public double pidGet()
		{
			return Robot.targets.getTargetOffsetFromCenter();			
		}


		@Override
		public PIDSourceType getPIDSourceType()
		{
			return PIDSourceType.kDisplacement;
		}

		@Override
		public void setPIDSourceType(PIDSourceType pidSource)
		{
			// Do nothing.. Right now leave source type as displacement
		}
	}

}
