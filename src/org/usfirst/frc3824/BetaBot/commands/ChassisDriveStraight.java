// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.commands;

import org.usfirst.frc3824.BetaBot.Constants;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Timer;

import org.usfirst.frc3824.BetaBot.Robot;

/**
 *
 */
public class ChassisDriveStraight extends Command
{
	private Timer  m_Timer;
	private double m_DriveDuration;
	private double m_DrivePower;
	private double m_DriveDirection;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ChassisDriveStraight()
	{
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// instantiate a timer
        m_Timer = new Timer();

		// default test values when called from the SmartDashboard
        m_DriveDuration  = 3.0;
        m_DrivePower     = 0.7;
        m_DriveDirection = 0.0;
	}

	public ChassisDriveStraight(double duration, double power, double direction)
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// instantiate a timer
        m_Timer = new Timer();

		// copy the parameters to the class variables
        m_DriveDuration  = duration;
        m_DrivePower     = power;
        m_DriveDirection = direction;
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Set the PID up for driving straight
		Robot.chassis.configurePIDs(Constants.DRIVETRAIN_DRIVE_STRAIGHT_P, 
	                                Constants.DRIVETRAIN_DRIVE_STRAIGHT_I, 
	                                Constants.DRIVETRAIN_DRIVE_STRAIGHT_D, 
	                                Robot.chassis.getCurrentHeading(), m_DrivePower);

		// reset and start the timer
		m_Timer.reset();
		m_Timer.start();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		SmartDashboard.putNumber("Gyro", Robot.chassis.getCurrentHeading());
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		return (m_Timer.get() > m_DriveDuration);
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// disable the PID and stop the robot
		Robot.chassis.getAngleGyroController().disable();
		Robot.chassis.getRobotDrive().arcadeDrive(0, 0);
		m_Timer.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		// call the end method
		this.end();
	}
}
