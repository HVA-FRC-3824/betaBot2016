// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3824.BetaBot.Robot;

/**
 *
 */
public class ShootBoulderInGoal extends Command
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_ShooterAngle;
	private double m_ShooterWheelSpeed;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private double WHEEL_SPINUP_TIME = 1.5; 
	
	private Timer m_Timer;
	private boolean isShooterPositionOut;
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ShootBoulderInGoal(double ShooterAngle, double ShooterWheelSpeed)
	{
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_ShooterAngle = ShooterAngle;
		m_ShooterWheelSpeed = ShooterWheelSpeed;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    	m_Timer = new Timer();
	}
	
	// Called just before this Command runs the first time
	protected void initialize()
	{
//		System.out.println("ShootBoudler in Goal initialize");
		
		Robot.shooter.setShooterElevationEnabled(true);
		Robot.shooter.setShooterElevationSetpoint(m_ShooterAngle);
		Robot.shooter.ShooterWheelControl(m_ShooterWheelSpeed);
		
		isShooterPositionOut = false;
		
		m_Timer.reset();
		m_Timer.start();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		// Allow time for shooter wheels to come to speed
		if ((isShooterPositionOut == false )&& (m_Timer.get() >= WHEEL_SPINUP_TIME))
		{
			Robot.shooter.ShooterShootBallControl(true);
			isShooterPositionOut = true;
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{	
		return isShooterPositionOut && (m_Timer.get() >= WHEEL_SPINUP_TIME + 0.5);
	}

	// Called once after isFinished returns true
	protected void end()
	{
//		System.out.println("ShootBoudler in Goal end");
		
		Robot.shooter.ShooterShootBallControl(false);
		m_Timer.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		end();
	}
}
