// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3824.BetaBot.Robot;
import org.usfirst.frc3824.BetaBot.Constants;
import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class BoulderIntakeControl extends Command
{
	private boolean m_manual_enabled = false;
	private double m_desired_position = 0.0;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_IntakePosition = 0.0;
	private boolean m_roll = false;
	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public BoulderIntakeControl(double IntakePosition, boolean roll)
	{
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_IntakePosition = IntakePosition;
		m_roll = roll;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.boulderIntake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Assume not in manual mode
		m_manual_enabled = false;
	
		// Low power for normal mode
		Robot.boulderIntake.setBoulderControlPowerRange(Constants.BOULDER_INTAKE_RETRACT_POWER, 
		                                                Constants.BOULDER_INTAKE_EXTEND_POWER);
		
		// Remember the desired intake position
		m_desired_position = m_IntakePosition;
		
		if (m_IntakePosition == Constants.BOULDER_INTAKE_HOME_BUTTON)
		{
			// Home Position
			m_desired_position = 0.0;
		}
		else if (m_IntakePosition == Constants.BOULDER_INTAKE_MAX_EXTEND_BUTTON)
		{
			// Maximum down
			m_desired_position = 1.0;
		}
		else if (m_IntakePosition == Constants.BOULDER_INTAKE_BOULDER_BUTTON)
		{
			// Intake Position
			m_desired_position = 0.95;
		}
		else if (m_IntakePosition == Constants.BOULDER_INTAKE_MANUFAL_BUTTON)
		{
			m_manual_enabled = true;
			
			// Allow full power for Portcullis
			// Note: Just need to increase up power
			Robot.boulderIntake.setBoulderControlPowerRange(-1.0, Constants.BOULDER_INTAKE_EXTEND_POWER);
			
			// Get the potentiometer position from the control panel
			// Note: X position -1 to 1 and desired position is from 0 to 1
			m_desired_position = (Robot.oi.controllerJoystick.getX() + 1.0) / 2.0;
		}
		
		// Set the boulder intake desired potentiometer position
		Robot.boulderIntake.SetPID_Position(m_desired_position);

		// enable the boulder intake PIDs
		Robot.boulderIntake.EnableBoulderIntakePID();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		// Determine if manual mode is enabled
		if (m_manual_enabled)
		{
			// Get the potentiometer position from the control panel
			// Note: X position -1 to 1 and desired position is from 0 to 1
			m_desired_position = (Robot.oi.controllerJoystick.getX() + 1.0) / 2.0;
			
			// Set the boulder intake desired potentiometer position
			Robot.boulderIntake.SetPID_Position(m_desired_position);
		}
		
		// Determine if the intake roller should be enabled
		if (m_roll == true)
		{
			Robot.boulderIntake.setBoulderIntakeWheelSpeed(Constants.BOULDER_ROLLER_SPEED);
		}
		else
		{
			Robot.boulderIntake.setBoulderIntakeWheelSpeed(0);
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		return true;
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// Disable the boulder intake wheel is returning to home position
		if (m_desired_position < 0.5)
			Robot.boulderIntake.setBoulderIntakeWheelSpeed(0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
}
