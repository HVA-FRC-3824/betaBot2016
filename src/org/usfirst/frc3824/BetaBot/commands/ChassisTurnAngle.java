// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.commands;

import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3824.BetaBot.Constants;
import org.usfirst.frc3824.BetaBot.Robot;

/**
 *
 */
public class ChassisTurnAngle extends Command
{
	private Timer m_Timer;
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_TurnDegrees;
	private double m_DrivePower;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ChassisTurnAngle(double TurnDegrees, double DrivePower)
	{
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_TurnDegrees = TurnDegrees;
		m_DrivePower  = DrivePower;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        // Create the timer instance
        m_Timer = new Timer();  
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Set the target turn angle based on the present gyro value and the
		// desired turn degrees
		double goToGyro = Robot.chassis.getGyro().getAngle() + m_TurnDegrees;

		// Set angle for turning
		Robot.chassis.getAngleGyroController().setPID(	
		Preferences.getInstance().getDouble("Turn P", Constants.DRIVETRAIN_TURN_ANGLE_P), 
		Preferences.getInstance().getDouble("Turn I", Constants.DRIVETRAIN_TURN_ANGLE_I),
		Preferences.getInstance().getDouble("Turn D", Constants.DRIVETRAIN_TURN_ANGLE_D));

		Robot.chassis.setMagnitude(m_DrivePower);

		Robot.chassis.getAngleGyroController().reset();
		Robot.chassis.getAngleGyroController().setAbsoluteTolerance(Constants.TURN_THRESHOLD);
		Robot.chassis.getAngleGyroController().setSetpoint(goToGyro);
		Robot.chassis.getAngleGyroController().enable();

		m_Timer.reset();
		m_Timer.start();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		SmartDashboard.putNumber("Angle", Robot.chassis.getGyroValue());
		SmartDashboard.putNumber("Error", Robot.chassis.getAngleGyroController().getError());
		SmartDashboard.putNumber("Setpoint", Robot.chassis.getAngleGyroController().getSetpoint());
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		SmartDashboard.putNumber("Timer", m_Timer.get());
		
		// Determine if the robot has reached the desired angle
		if (Robot.chassis.getAngleGyroController().onTarget() == true)
		{
			// Ensure hold position for time out time
			if (m_Timer.get() > 0.1)
			{
				return (true);
			}
		}
		else
		{
			// Reset the timer since the move did not complete
			m_Timer.reset();
		}
		
		// Not at proper angle
		return (false);
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// disable the PID controller
		Robot.chassis.getAngleGyroController().disable();
		Robot.chassis.getRobotDrive().arcadeDrive(0, 0);
		m_Timer.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
}
