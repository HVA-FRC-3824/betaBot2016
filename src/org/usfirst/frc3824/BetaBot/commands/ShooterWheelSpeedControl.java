// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.commands;

import org.usfirst.frc3824.BetaBot.Constants;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3824.BetaBot.Robot;

/**
 *
 */
public class ShooterWheelSpeedControl extends Command
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ShooterWheelSpeedControl()
	{
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		// Determine if the shooter wheel is enabled
		if (Robot.shooter.IsShooterWheelEnabled() == true)
		{
			// Set the shooter wheel based on the Operator Joystick
			Robot.shooter.ShooterWheelControl(-Robot.oi.controllerJoystick.getY(),Robot.oi.controllerJoystick.getTwist()*Constants.SHOOTER_WHEEL_TELEOP_CURVE_MULTIPLIER);
			SmartDashboard.putNumber("Shooter Speed", -Robot.oi.controllerJoystick.getY());
		}
		else
		{
			// Shooter is disabled so turn off the motors
			Robot.shooter.ShooterWheelControl(0.0);
		}
		
		SmartDashboard.putNumber("Control Y: ",Robot.oi.controllerJoystick.getY());
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		// The Shooter Wheel is always active
		return false;
	}

	// Called once after isFinished returns true
	protected void end()
	{

	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{

	}
}
