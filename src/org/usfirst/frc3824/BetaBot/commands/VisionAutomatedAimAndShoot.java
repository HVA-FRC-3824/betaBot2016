// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.Timer;

import org.usfirst.frc3824.BetaBot.Robot;

/**
 *
 */
public class VisionAutomatedAimAndShoot extends Command
{
	private boolean m_shot_completed = false;
	private Timer m_timer;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public VisionAutomatedAimAndShoot()
	{
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.chassis);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// Initialize the timer
		m_timer = new Timer();
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Initialize turn PID
		

		// reset and start the timer
		m_timer.reset();
		m_timer.start();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		// Determine if a new image should be processed
		if (m_timer.get() > 1.0)
		{
			// Adjust the robot angle and shooter height
			determine_shooter_height();
			determine_robot_turn_angle();

			// Reset the timer for the next image processing
			m_timer.reset();
		}

		// Determine if the robot is properly aligned
		if (robot_aligned() == true)
		{
			// Perform the shot

		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		return m_shot_completed;
	}

	// Called once after isFinished returns true
	protected void end()
	{
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
	}

	private void determine_shooter_height()
	{

	}

	private void determine_robot_turn_angle()
	{

	}

	private boolean robot_aligned()
	{
		// Still aligning robot
		return(false);
	}
}
