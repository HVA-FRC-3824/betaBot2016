// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3824.BetaBot.Robot;

/**
 *
 */
public class AxeControl extends Command
{
	private Timer m_holdTimer;
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private boolean m_RightAxeExtend;
	private boolean m_LeftAxeExtend;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AxeControl(boolean RightAxeExtend, boolean LeftAxeExtend)
	{

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_RightAxeExtend = RightAxeExtend;
		m_LeftAxeExtend = LeftAxeExtend;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.battleAxes);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
		// Initialize the timer
        m_holdTimer = new Timer();
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Extend the battle axes
		Robot.battleAxes.setAxePositions(m_RightAxeExtend, m_LeftAxeExtend);
		
		// Start the boulder intake wheels
		if (m_RightAxeExtend == true)
			Robot.battleAxes.setWheelIntakePower(-0.5, 0.5);
		else
			Robot.battleAxes.setWheelIntakePower(0.0, 0.0);
		
		// reset and start the timer
		m_holdTimer.reset();
		m_holdTimer.start();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		if (m_holdTimer.get() > 5.0)
		   return true;
		
		return(false);
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// Disable the boulder intake wheels
		Robot.battleAxes.setWheelIntakePower(0.0, 0.0);	
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
}
