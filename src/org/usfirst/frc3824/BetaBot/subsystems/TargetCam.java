// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.subsystems;

import java.io.IOException;

import org.usfirst.frc3824.BetaBot.Constants;
import org.usfirst.frc3824.BetaBot.Robot;
import org.usfirst.frc3824.BetaBot.RobotMap;
import org.usfirst.frc3824.BetaBot.commands.*;

import com.ni.vision.NIVision;
import java.lang.reflect.Field;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class TargetCam extends Subsystem
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public TargetCam()
	{
	}
	
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
		
	/*
	 * Update the camera with the current values in the preferences
	 */
	public void updateFromPreferences()
	{
		setExposure(Preferences.getInstance().getInt("camExposure", 50));
		setBrightness(Preferences.getInstance().getInt("camBrightness", 50));
	}
		
	/*
	 * Set the camera's exposure value, will force camera to manual exposure
	 */
	public void setExposure(int exposure)
	{
		ProcessBuilder pb = new ProcessBuilder("ssh pi@raspi2.local v4l2-ctl -c exposure=" + String.valueOf(exposure));

		try {
			// launch the GRIP process and then get it's PID
			Process process = pb.inheritIO().start();
			System.out.println("Exposure successfully set");
        } catch (IOException e) {
            e.printStackTrace();
			System.out.println("Exposure command failed");
        }
	}
	
	/*
	 * Set the camera's brightness value
	 */
	public void setBrightness(int brightness)
	{
		ProcessBuilder pb = new ProcessBuilder("ssh pi@raspi2.local v4l2-ctl -c brightness=" + String.valueOf(brightness));

		try {
			// launch the GRIP process and then get it's PID
			Process process = pb.inheritIO().start();
			System.out.println("Brightness successfully set");
        } catch (IOException e) {
            e.printStackTrace();
			System.out.println("Brightness command failed");
        }
	}

	/*
	 * Set the camera's exposure value, will force camera to manual exposure
	 */
	public void setSaturation(int saturation)
	{
		ProcessBuilder pb = new ProcessBuilder("ssh pi@raspi2.local v4l2-ctl -c saturation=" + String.valueOf(saturation));

		try {
			// launch the GRIP process and then get it's PID
			Process process = pb.inheritIO().start();
			System.out.println("Saturation successfully set");
        } catch (IOException e) {
            e.printStackTrace();
			System.out.println("Saturation command failed");
        }
	}
	
	/*
	 * Switch the camera to auto exposure mode
	 */
	public void setExposureAuto()
	{
	}
	
	/*
	 * Switch to manual exposure, holding the exposure to the current value
	 */
	public void setExposureHoldCurrent()
	{
	}
	
	
	public static void cleanAndStartVision()
	{
		stopVision();
		startVision();
	}
	
	/*
	 * Start the image processing on the RPi
	 */
	public static void startVision()
	{
		ProcessBuilder pb = new ProcessBuilder("ssh pi@raspi2.local /home/pi/vision/start_vision.sh");

		try {
			// launch the GRIP process and then get it's PID
			Process process = pb.inheritIO().start();
			System.out.println("Image processing successfully launched");
        } catch (IOException e) {
            e.printStackTrace();
			System.out.println("Image processing failed to launch");
        }
	}
		
	/*
	 * Kill the image processing on the RPi
	 */
	public static void stopVision()
	{
		ProcessBuilder pb = new ProcessBuilder("ssh pi@raspi2.local /home/pi/vision/stop_vision.sh");

		try {
			// launch the GRIP process and then get it's PID
			Process process = pb.inheritIO().start();
			System.out.println("Image processing successfully stopped");
        } catch (IOException e) {
            e.printStackTrace();
			System.out.println("Image processing failed to stop");
        }
	}
	
}
