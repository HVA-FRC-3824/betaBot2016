// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.BetaBot.subsystems;

import org.usfirst.frc3824.BetaBot.Constants;
import org.usfirst.frc3824.BetaBot.RobotMap;
import org.usfirst.frc3824.BetaBot.commands.*;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Climber extends Subsystem
{

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay blower = RobotMap.climberBlower;
    private final SpeedController leftWinch = RobotMap.climberLeftWinch;
    private final SpeedController rightWinch = RobotMap.climberRightWinch;
    private final Servo hookRelease = RobotMap.climberHookRelease;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// These are the servo positions for holding and releasing the hook
	// They probably need to be adjusted.
	private final double kRelease = 1.0;
	private final double kHold = 0.0;

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());

		// The blower can only run in ONE direction. This means
		// the relay settings are either ON or OFF. If the blower
		// is running the wrong direction when turned on, either
		// swap the wires on the Spike or change kForward to kReverse
		blower.setDirection(Relay.Direction.kForward);

		// because the motor are facing each other, one will need
		// to be inverted relative to the other. This can either
		// be done at the wiring, or here in software.
		leftWinch.setInverted(true);
		rightWinch.setInverted(true);
	}

	public void inflateStart()
	{
		blower.set(Relay.Value.kOn);
	}

	public void inflateStop()
	{
		blower.set(Relay.Value.kOff);
	}

	public void climbStart()
	{
		leftWinch.set(Constants.CLIMBER_LEFT_WINCH_SPEED);
		rightWinch.set(Constants.CLIMBER_RIGHT_WINCH_SPEED);
	}

	public void climbStop()
	{
		leftWinch.set(0);
		rightWinch.set(0);
	}

	public void climbUnwindStart()
	{
		leftWinch.set(-Constants.CLIMBER_LEFT_WINCH_SPEED);
		rightWinch.set(-Constants.CLIMBER_RIGHT_WINCH_SPEED);
	}

	public void hookRelease()
	{
		hookRelease.set(kRelease);
	}

	public void resetHook()
	{
		hookRelease.set(kHold);
	}
}
